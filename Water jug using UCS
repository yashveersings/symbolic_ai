import heapq
def pour(glasses,glass1,glass2):
    copy=list(glasses)
    amount=min(copy[glass1],capacity[glass2]-copy[glass2])
    copy[glass1]-=amount
    copy[glass2]+=amount
    return tuple(copy)

def get_neighbour(glasses):
    neighbours=[]
    for i in range(len(glasses)):
        for j in range(len(glasses)):
            if i!=j:
                next_state=pour(glasses,i,j)
                neighbours.append(next_state)
    return neighbours

def ucs(start,goal):
    frontier=[(0,start)]
    path={start:None}
    cost_so_far={start:0}
    
    while frontier:
        cost,current=heapq.heappop(frontier)
        if current==goal:
            result=[]
            while current is not None:
                result.append(current)
                current=path[current]
            result.reverse()
            return result
        for neighbour in get_neighbour(current):
            new_cost=cost_so_far[current]+1
            if neighbour not in cost_so_far or new_cost<cost_so_far[neighbour]:
                cost_so_far[neighbour]=new_cost
                priority=new_cost
                heapq.heappush(frontier,(priority,neighbour))
                path[neighbour]=current
    return None,None

capacity=(8,5,3)
start=(8,0,0)
goal=(4,4,0)

result=ucs(start,goal)
print(result)
