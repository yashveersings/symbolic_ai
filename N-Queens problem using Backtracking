class solution:
    def nqueen(self,n):
        cols=set()
        posdig=set()
        negdig=set()
        result=[]
        board=[['.']*n for i in range(n)]
        
        def backtracking(r):
            if r==n:
                copy=[''.join(rows)for rows in board]
                result.append(copy)
                return 
            
            for c in range(n):
                if c in cols or r+c in posdig or r-c in negdig:
                    continue
                    
                cols.add(c)
                posdig.add(r+c)
                negdig.add(r-c)
                board[r][c]='Q'
            
                backtracking(r+1)
            
                cols.remove(c)
                posdig.remove(r+c)
                negdig.remove(r-c)
                board[r][c]='.'
        backtracking(0)
        return result

sol=solution()
res=sol.nqueen(4)
print(res)
